@page "/BizGroupC/ShowAuthorsByCondition/FilterByCondition"

@rendermode InteractiveServerWithoutPrerendering

@* アプリケーションサービス *@
@inject IDbContextFactory<PubsDbContext> dbFactory

<PageTitle>複雑な条件指定による著者一覧表示</PageTitle>

<h3>複雑な条件指定による著者一覧表示</h3>
<h5>検索条件を指定してください。</h5>

<EditForm Model="@vm" OnValidSubmit="@GetData">
    <fieldset disabled="@isFormDisabled">
        <DataAnnotationsValidator />

        <dl>
            <dt>
                <InputCheckbox @bind-Value="vm.IsEnabledAuFname" class="form-check-input" /> 著者名(名)による検索
            </dt>
            <dd>
                <InputText @bind-Value="vm.AuFname" class="form-text" />
            </dd>

            <dt>
                <InputCheckbox @bind-Value="vm.IsEnabledPhone" class="form-check-input" /> 電話番号による検索
            </dt>
            <dd>
                <InputText @bind-Value="vm.Phone" class="form-text" />
            </dd>

            <dt>
                <InputCheckbox @bind-Value="vm.IsEnabledState" class="form-check-input" /> 州による検索
            </dt>
            <dd>
                <InputSelect @bind-Value="vm.State" class="form-select-sm">
                    @if (states != null) foreach (var item in states)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </InputSelect>
            </dd>

            <dt>
                <InputCheckbox @bind-Value="vm.IsEnabledContract" class="form-check-input" /> 契約有無による検索
            </dt>
            <dd>
                <InputSelect @bind-Value="vm.ContractString" class="form-select-sm">
                    <option value=""></option>
                    <option value="true">契約あり</option>
                    <option value="false">契約なし</option>
                </InputSelect>
            </dd>

        </dl>

        <button type="submit" class="btn btn-primary">検索</button>

        <ValidationSummary />
    </fieldset>
</EditForm>

<hr />

<AuthorsQuickGrid Authors="authors" />

@code {
    // 外部パラメータ

    // ビューモデル
    private FindConditionViewModel vm = new FindConditionViewModel();
    private SortedDictionary<string, string> states = new SortedDictionary<string, string>();
    private List<Author>? authors = new List<Author>();
    private bool isFormDisabled = false;

    int count = 0;

    // イベントハンドラ(アプリケーション処理)
    protected override void OnInitialized()
    {
        states = USStatesUtil.GetAllStates();
        states.Add("", "");
    }

    private async Task GetData()
    {
        if (isFormDisabled) return; // ← UI 更新前の連打防止用

        isFormDisabled = true;
        authors = null;

        // await Task.Delay(1000);

        await using (var pubs = await dbFactory.CreateDbContextAsync())
        {
            var query = pubs.Authors.AsQueryable();
            if (vm.IsEnabledState) query = query.Where(a => a.State == vm.State);
            if (vm.IsEnabledPhone) query = query.Where(a => a.Phone == vm.Phone);
            if (vm.IsEnabledContract) query = query.Where(a => a.Contract == vm.Contract!.Value);
            if (vm.IsEnabledAuFname) query = query.Where(a => a.AuthorFirstName.StartsWith(vm.AuFname));
            authors = await query.ToListAsync();
        };

        isFormDisabled = false;
    }
}
